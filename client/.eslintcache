[{"/Users/gigi/general_assembly/Ruby/unit_2/projects/mindmilk/client/src/index.js":"1","/Users/gigi/general_assembly/Ruby/unit_2/projects/mindmilk/client/src/App.js":"2","/Users/gigi/general_assembly/Ruby/unit_2/projects/mindmilk/client/src/reportWebVitals.js":"3","/Users/gigi/general_assembly/Ruby/unit_2/projects/mindmilk/client/src/services/index.js":"4","/Users/gigi/general_assembly/Ruby/unit_2/projects/mindmilk/client/src/components/Nav.jsx":"5","/Users/gigi/general_assembly/Ruby/unit_2/projects/mindmilk/client/src/components/Home.jsx":"6"},{"size":587,"mtime":1611193075000,"results":"7","hashOfConfig":"8"},{"size":656,"mtime":1611254920000,"results":"9","hashOfConfig":"8"},{"size":362,"mtime":1611172659000,"results":"10","hashOfConfig":"8"},{"size":209,"mtime":1611195207000,"results":"11","hashOfConfig":"8"},{"size":455,"mtime":1611211049000,"results":"12","hashOfConfig":"8"},{"size":392,"mtime":1611256107000,"results":"13","hashOfConfig":"8"},{"filePath":"14","messages":"15","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},"p23hks",{"filePath":"17","messages":"18","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"19","usedDeprecatedRules":"16"},{"filePath":"20","messages":"21","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},{"filePath":"22","messages":"23","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"25","messages":"26","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},{"filePath":"27","messages":"28","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"29","usedDeprecatedRules":"16"},"/Users/gigi/general_assembly/Ruby/unit_2/projects/mindmilk/client/src/index.js",[],["30","31"],"/Users/gigi/general_assembly/Ruby/unit_2/projects/mindmilk/client/src/App.js",["32","33"],"import './App.css';\nimport axios from \"axios\";\nimport { baseURL, config } from \"./services\";\nimport { useEffect, useState } from \"react\";\nimport Nav from \"./components/Nav\"\nimport Home from \"./components/Home\"\n\nfunction App() {\n  {/* save posts in state */}\n    const [posts, setPosts] = useState([]);\n  {/* get data from API */}\n  useEffect(() => {\n    const getPosts = async () => {\n      const resp = await axios.get(baseURL, config);\n      setPosts(resp.data.records);\n      console.log(resp)\n    };\n    getPosts();\n  }, []);\n    return (\n      <div className=\"App\">\n        <Nav />\n        <Home posts={posts}/>\n    </div>\n  );\n}\n\nexport default App;\n","/Users/gigi/general_assembly/Ruby/unit_2/projects/mindmilk/client/src/reportWebVitals.js",[],"/Users/gigi/general_assembly/Ruby/unit_2/projects/mindmilk/client/src/services/index.js",[],["34","35"],"/Users/gigi/general_assembly/Ruby/unit_2/projects/mindmilk/client/src/components/Nav.jsx",[],"/Users/gigi/general_assembly/Ruby/unit_2/projects/mindmilk/client/src/components/Home.jsx",["36"],"\nfunction Home(props) {\n  return (\n    <div>\n      <main>\n        {props.posts.map((post) => {\n          return (\n            <div class= \"post\">\n              <h1>{post.fields.name} </h1>\n              <img className= \"icons\" src= {post.fields.image}/>\n              <p>{post.fields.posts} </p>\n\n            </div>\n          )\n        })}\n      </main>\n    </div>\n  )\n}\n\nexport default Home;",{"ruleId":"37","replacedBy":"38"},{"ruleId":"39","replacedBy":"40"},{"ruleId":"41","severity":1,"message":"42","line":9,"column":3,"nodeType":"43","messageId":"44","endLine":9,"endColumn":30},{"ruleId":"41","severity":1,"message":"42","line":11,"column":3,"nodeType":"43","messageId":"44","endLine":11,"endColumn":28},{"ruleId":"37","replacedBy":"45"},{"ruleId":"39","replacedBy":"46"},{"ruleId":"47","severity":1,"message":"48","line":10,"column":15,"nodeType":"49","endLine":10,"endColumn":65},"no-native-reassign",["50"],"no-negated-in-lhs",["51"],"no-lone-blocks","Nested block is redundant.","BlockStatement","redundantNestedBlock",["50"],["51"],"jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","no-global-assign","no-unsafe-negation"]